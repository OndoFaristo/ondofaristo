<?xml version="1.0" encoding="UTF-8"?>

<!-- Server-side manager bean definitions. These are only to be used at runtime. -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:mongo="http://www.springframework.org/schema/data/mongo"
    xmlns:cloud="http://schema.cloudfoundry.org/spring"
    
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                http://www.springframework.org/schema/aop
                http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                http://www.springframework.org/schema/data/mongo
                http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
                http://schema.cloudfoundry.org/spring
                http://schema.cloudfoundry.org/spring/cloudfoundry-spring-0.8.xsd">

    <bean id="dataModelManager" class="com.wavemaker.tools.data.DataModelManager"
        scope="singleton" lazy-init="true">
        <property name="projectManager">
            <ref bean="projectManager" />
        </property>
        <property name="projectCompiler">
            <ref bean="projectCompiler" />
        </property>
        <property name="designServiceManager">
            <ref bean="designServiceManager" />
        </property>
		<property name="exporterFactory">
            <ref bean="exporterFactory" />
        </property>
		<property name="localExporterFactory">
            <ref bean="localExporterFactory" />
        </property>
    </bean>

    <bean name="studio-typeManager" id="typeManager"
        class="com.wavemaker.runtime.service.TypeManager" scope="singleton"
        parent="typeManagerBase">
        <property name="types">
            <map merge="true">
            </map>
        </property>
        <property name="serviceManager">
            <ref bean="serviceManager" />
        </property>
    </bean>

    <bean id="projectManager" class="com.wavemaker.tools.project.ProjectManager"
        scope="session" lazy-init="true">
        <property name="fileSystem">
            <ref bean="fileSystem" />
        </property>
        <property name="projectEventNotifier">
            <ref bean="projectEventNotifier" />
        </property>
        <property name="upgradeManager">
            <ref bean="upgradeManager" />
        </property>

        <aop:scoped-proxy />
    </bean>

	<bean id="serviceDeploymentManager" class="com.wavemaker.tools.deployment.ServiceDeploymentManager"
		scope="singleton" lazy-init="true">
		<property name="projectManager">
			<ref bean="projectManager" />
		</property>
		<property name="studioConfiguration">
            <ref bean="studioConfiguration"/>
        </property>
		<property name="fileSystem">
            <ref bean="fileSystem"/>
        </property>
		<property name="projectCompiler">
            <ref bean="projectCompiler"/>
        </property>
	</bean>

    <bean id="tomcatDeploymentTarget"
        class="com.wavemaker.tools.deployment.tomcat.TomcatDeploymentTarget"
        scope="singleton" lazy-init="true" />

    <bean id="cloudFoundryDeploymentTarget"
        class="com.wavemaker.tools.deployment.cloudfoundry.CloudFoundryDeploymentTarget"
        scope="singleton" lazy-init="true">
        <property name="dataModelManager" ref="dataModelManager" />
        <property name="webAppAssembler" ref="webAppAssembler"/>
    </bean>
    
    <bean id="webAppAssembler" class="com.wavemaker.tools.deployment.cloudfoundry.WebAppAssembler">
        <property name="fileSystem" ref="fileSystem"/>
    </bean>

    <bean id="deploymentTargetManager" class="com.wavemaker.tools.deployment.DeploymentTargetManager"
        scope="singleton" lazy-init="true">
        <property name="deploymentTargets">
            <map>
                <entry key="TOMCAT" value-ref="tomcatDeploymentTarget" />
                <entry key="CLOUD_FOUNDRY" value-ref="cloudFoundryDeploymentTarget" />
            </map>
        </property>
    </bean>

    <bean id="designServiceManager" class="com.wavemaker.tools.service.DesignServiceManager"
        scope="session" autowire="byType" lazy-init="true">

        <aop:scoped-proxy />
    </bean>

    <!-- java compiler -->
    <bean id="projectCompiler" class="com.wavemaker.tools.compiler.ProjectCompiler"
        scope="singleton" lazy-init="true">
        <property name="projectManager">
            <ref bean="projectManager" />
        </property>
        <property name="fileSystem">
            <ref bean="fileSystem" />
        </property>
        <property name="designServiceManager">
            <ref bean="designServiceManager" />
        </property>
    </bean>

    <!-- see comments in the file -->
    <import resource="classpath:designservicetypes.xml" />

    <bean id="pagesManager" class="com.wavemaker.tools.project.PagesManager"
        scope="singleton" lazy-init="true">
        <property name="projectManager">
            <ref bean="projectManager" />
        </property>
        <property name="fileSystem">
            <ref bean="fileSystem" />
        </property>
    </bean>

    <!-- Beans needed for Salesforce interface. These beans will later need 
        to be moved to -->
    <!-- the module container after the module design is enhanced. -->

    <bean id="sfLoginObject" class="com.wavemaker.runtime.ws.salesforce.LoginObject"
        scope="session" lazy-init="true">
    </bean>

    <bean id="sfLoginService" class="com.wavemaker.runtime.ws.salesforce.LoginService"
        scope="singleton" lazy-init="true">
    </bean>

    <bean id="sfServiceBean" class="com.wavemaker.runtime.ws.salesforce.gen.SforceService"
        scope="singleton" lazy-init="true">
    </bean>

    <!-- we don't lazy-init this; upgradeManager has some afterPropertiesSet() 
        to perform some studio upgrade tasks -->
    <bean id="upgradeManager" class="com.wavemaker.tools.project.upgrade.UpgradeManager"
        scope="singleton" lazy-init="false">

        <!-- the upgrades property contains a Map<Double,List<UpgradeTask>>. The 
            UpgradeManager, when doing an upgrade, will iterate through the keys of list 
            (in order) going from the project's current version to the current system 
            version (which is the largest key in this map). Since these will be performed 
            in-order, once a version upgrade has been released, it MUST NEVER be removed 
            from this map. Or we'll get into an awful state that we'll never be able 
            to support. -->
        <property name="studioUpgrades">
            <map merge="true">
                <!-- 0.0 is the starting version; no upgrades should be present here. -->
                <entry key="0.0">
                    <list />
                </entry>
                <entry key="0.1">
                    <list />
                </entry>
                <entry key="0.2">
                    <list />
                 </entry>
            </map>
        </property>
        <property name="upgrades">
            <map merge="true">
                <!-- Projects from WM 6.2.5 or older must be upgraded to WM 6.2 - 6.4 before use in 6.5+  -->
                <entry key="0.44">
                    <list>
                        <bean
                            class="com.wavemaker.tools.project.upgrade.six_dot_three.WebXmlUpgradeTask">
                        </bean>
                    </list>
                </entry>
                <entry key="0.45">
                    <list>
                        <bean
                            class="com.wavemaker.tools.project.upgrade.six_dot_three.ProjSpringAppXmlUpgradeTask">
                        </bean>
                    </list>
                </entry>
                <entry key="0.46">
                    <list>
                        <bean class="com.wavemaker.tools.project.upgrade.six_dot_four.IE_XUATagUpgradeTask"/>
                        <bean class="com.wavemaker.tools.project.upgrade.six_dot_four.ProjSpringServicesXmlUpgradeTask"/>
                        <bean class="com.wavemaker.tools.project.upgrade.six_dot_four.RemoveMySQLHBMCatalogUpgradeTask"/>
                    </list>
                </entry>
                <entry key="0.47">
                    <list>
                        <bean class="com.wavemaker.tools.project.upgrade.six_dot_four_dot_two.OldMSIEUpgradeTask">
                        	<constructor-arg ref="fileSystem"/>
                        </bean>
                    </list>
   				</entry>	
                <entry key="0.48">
                    <list>
                        <bean class="com.wavemaker.tools.project.upgrade.six_dot_four_dot_three.MergeIEXUATagUpgradeTask" />
                    </list>
                </entry>
                <entry key="0.49">
                    <list>
                        <bean class="com.wavemaker.tools.project.upgrade.six_dot_five_dot_zero.ProjSvcsUpgradeTask" />
                    </list>
                </entry>
                <entry key="0.50">
                    <list>
                        <bean class="com.wavemaker.tools.project.upgrade.six_dot_five_M3.SecurityUpgradeTask" />
                    </list>
                </entry>
                <entry key="0.51">
                    <list>
                        <bean class="com.wavemaker.tools.project.upgrade.six_dot_five_M3.ProjSvcsUpgradeTask" />
                    </list>
                </entry>
                <entry key="0.52">
                    <list>
                        <bean class="com.wavemaker.tools.project.upgrade.UpgradeTemplateFile">
                            <property name="file" value="webapproot/WEB-INF/project-springapp.xml" />
                        </bean>
                        <bean class="com.wavemaker.tools.project.upgrade.UpgradeTemplateFile">
                            <property name="file" value="webapproot/WEB-INF/project-services.xml" />
                        </bean>
                        <bean class="com.wavemaker.tools.project.upgrade.six_dot_five_M4.IE10XUAUpgradeTask"/>
                    </list>
                </entry>  
                <entry key="0.53">
                    <list>
                        <bean class="com.wavemaker.tools.project.upgrade.six_dot_five_RC1.IndexHtmlUpgradeTask" >
                            <property name="indexFile" value="webapproot/index.html" />
                        </bean>
                    </list>
                </entry> 
            </map>
        </property>
        <property name="deploymentManager">
            <ref bean="deploymentManager" />
        </property>
        
        <property name="studioConfiguration" ref="studioConfiguration"/>
    </bean>

    <!-- event notifiers & listeners not associated with any service -->
    <bean id="projectEventNotifier" class="com.wavemaker.tools.project.ProjectEventNotifier"
        scope="singleton">
        <property name="eventManager">
            <ref bean="eventManager" />
        </property>
    </bean>
    <bean class="com.wavemaker.runtime.service.events.EventWire">
        <property name="eventListener">
            <bean class="com.wavemaker.tools.service.DSMProjectEventListener">
                <property name="designServiceManager">
                    <ref bean="designServiceManager" />
                </property>
            </bean>
        </property>
    </bean>
    <bean class="com.wavemaker.runtime.service.events.EventWire">
    	<property name="eventListener">
    		<bean class="com.wavemaker.studio.data.DataServiceProjectEventListener"/>
    	</property>
    </bean>

	<bean id="localExporterFactory" class="com.wavemaker.tools.data.LocalExporterFactory"
		scope="singleton" lazy-init="true">
	</bean>

	<bean class="com.wavemaker.runtime.data.cloudfoundry.CloudFoundryDataServiceBeanFactoryPostProcessor"/>

    <beans profile="default">
    
    	<bean id="fileSystem" class="com.wavemaker.tools.project.LocalStudioFileSystem"/>
        
        <bean id="studioConfiguration" class="com.wavemaker.tools.project.LocalStudioConfiguration"
            scope="singleton">
            <constructor-arg ref="fileSystem"/>
            <property name="runtimeAccess">
                <ref bean="runtimeAccess" />
            </property>
        </bean>

		<bean id="exporterFactory" class="com.wavemaker.tools.data.LocalExporterFactory"
            scope="singleton" lazy-init="true">
        </bean>

        <bean id="deploymentManager" class="com.wavemaker.tools.project.LocalDeploymentManager"
            scope="singleton" lazy-init="true">
            <property name="projectManager">
                <ref bean="projectManager" />
            </property>
            <property name="fileSystem">
                <ref bean="fileSystem" />
            </property>
            <property name="projectCompiler">
                <ref bean="projectCompiler" />
            </property>
            <property name="studioConfiguration" ref="studioConfiguration"/>
        </bean>
        
        <bean id="waveMakerSecurityFilter" class="com.wavemaker.tools.security.LocalSecurityFilter"/>
    </beans>

    <beans profile="cloud-test">
        <mongo:mongo />
        
        <mongo:db-factory dbname="testWM" />
        
        <bean id="fileSystem" class="com.wavemaker.tools.project.GridFSStudioFileSystem">
            <constructor-arg ref="mongoDbFactory"/>
        </bean>
    
        <bean id="studioConfiguration" class="com.wavemaker.tools.project.CFStudioConfiguration"
            scope="singleton">
            <constructor-arg ref="fileSystem"/>
            <property name="runtimeAccess" ref="runtimeAccess"/>
        </bean>

		<bean id="exporterFactory" class="com.wavemaker.tools.data.CFExporterFactory"
            scope="singleton">
        </bean>

        <bean id="deploymentManager" class="com.wavemaker.tools.project.CloudFoundryDeploymentManager"
            scope="singleton" lazy-init="true">
            <property name="projectManager" ref="projectManager" />
            <property name="fileSystem" ref="fileSystem" />
            <property name="projectCompiler" ref="projectCompiler"/>
            <property name="deploymentTargetManager" ref="deploymentTargetManager"/>
			<property name="designServiceManager" ref="designServiceManager"/>
        </bean>
        
        <bean id="waveMakerSecurityFilter" class="com.wavemaker.tools.security.LocalSecurityFilter"/>
    </beans>
    
    <beans profile="cloud">
        <cloud:mongo-db-factory id="mongoDbFactory"/>
        
        <bean id="fileSystem" class="com.wavemaker.tools.project.GridFSStudioFileSystem">
            <constructor-arg ref="mongoDbFactory"/>
        </bean>
    
        <bean id="studioConfiguration" class="com.wavemaker.tools.project.CloudFoundryStudioConfiguration"
            scope="singleton">
            <constructor-arg ref="fileSystem"/>
            <property name="runtimeAccess" ref="runtimeAccess"/>
        </bean>

		<bean id="exporterFactory" class="com.wavemaker.tools.data.CFExporterFactory"
            scope="singleton">
        </bean>

        <bean id="deploymentManager" class="com.wavemaker.tools.project.CloudFoundryDeploymentManager"
            scope="singleton" lazy-init="true">
            <property name="projectManager" ref="projectManager" />
            <property name="fileSystem" ref="fileSystem" />
            <property name="projectCompiler" ref="projectCompiler"/>
            <property name="deploymentTargetManager" ref="deploymentTargetManager"/>
			<property name="designServiceManager" ref="designServiceManager"/>
        </bean>
        
        <bean id="waveMakerSecurityFilter" class="com.wavemaker.tools.security.CloudFoundrySecurityFilter"/>
    </beans>
    
</beans>
	